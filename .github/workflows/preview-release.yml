name: Preview release

permissions:
  pull-requests: write

on:
  push:
    branches:
      - master
  pull_request:
    types: [opened, synchronize, labeled]

jobs:
  preview:
    if: >
      github.repository == 'supabase/realtime-js' &&
      (github.event_name == 'push' ||
      (github.event_name == 'pull_request' && contains(github.event.pull_request.labels.*.name, 'trigger: preview')))
    runs-on: ubuntu-latest
    outputs:
      preview-url: ${{ steps.preview.outputs.url }}
      package-name: ${{ steps.preview.outputs.package }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Build
        run: npm run build

      - name: Publish preview
        id: preview
        run: |
          OUTPUT=$(npx pkg-pr-new@latest publish --compact 2>&1)  # Capture both stdout and stderr
          
          echo "=== RAW OUTPUT DEBUG ==="
          echo "$OUTPUT"
          echo "=== END RAW OUTPUT ==="
          
          echo "=== LINE BY LINE ==="
          echo "$OUTPUT" | cat -n
          echo "=== END LINE BY LINE ==="
          
          # Try different extraction methods
          echo "=== TESTING REGEX PATTERNS ==="
          
          echo "Method 1:"
          echo "$OUTPUT" | grep -o 'https://pkg\.pr\.new/@supabase/[^[:space:]]*' || echo "Method 1 failed"
          
          echo "Method 2:"
          echo "$OUTPUT" | grep 'npm i' || echo "No 'npm i' found"
          
          echo "Method 3:"
          echo "$OUTPUT" | grep 'pkg.pr.new' || echo "No 'pkg.pr.new' found"
          
          # Final extraction
          PREVIEW_URL=$(echo "$OUTPUT" | grep -o 'https://pkg\.pr\.new/@supabase/[^[:space:]]*' | head -1)
          REPO_NAME=$(echo "$GITHUB_REPOSITORY" | cut -d'/' -f2)
          
          echo "Final extracted URL: '$PREVIEW_URL'"
          echo "url=$PREVIEW_URL" >> $GITHUB_OUTPUT
          echo "package=$REPO_NAME" >> $GITHUB_OUTPUT

  trigger-supabase-js-tests:
    needs: preview
    if: needs.preview.outputs.preview-url != ''
    runs-on: ubuntu-latest
    steps:
      - name: Generate GitHub App token
        id: generate-token
        uses: actions/create-github-app-token@v1
        with:
          app-id: ${{ secrets.CROSS_REPO_APP_ID }}
          private-key: ${{ secrets.CROSS_REPO_APP_PRIVATE_KEY }}
          owner: supabase
          repositories: realtime-js,supabase-js

      - name: Log token
        run: |
            echo "Token: ${{ steps.generate-token.outputs.token }}"
            echo "App ID: ${{ secrets.CROSS_REPO_APP_ID }}"
            echo "Installation ID: ${{ secrets.CROSS_REPO_APP_INSTALLATION_ID }}"
          
      - name: Trigger supabase-js CI tests
        uses: actions/github-script@v7
        with:
          github-token: ${{ steps.generate-token.outputs.token }}
          script: |
            const prNumber = context.issue.number || 'push';
            const triggeringRepo = context.repo.repo;

            try {
              const response = await github.rest.actions.createWorkflowDispatch({
                owner: 'supabase',
                repo: 'supabase-js',
                workflow_id: 'external-test.yml',
                ref: 'chore/add-cross-repo-test',
                inputs: {
                  triggering_repo: triggeringRepo,
                  triggering_pr: prNumber.toString(),
                  preview_url: '${{ needs.preview.outputs.preview-url }}',
                  package_name: '${{ needs.preview.outputs.package-name }}',
                  triggering_sha: context.sha,
                  triggering_ref: context.ref
                }
              });
              
              console.log('Successfully triggered supabase-js tests');
              console.log('Response:', response.status);
              
              // Add a comment to the PR indicating tests were triggered
              if (context.issue.number) {
                await github.rest.issues.createComment({
                  owner: context.repo.owner,
                  repo: context.repo.repo,
                  issue_number: context.issue.number,
                  body: `üöÄ **Preview release created!**\n\nsupabase-js CI tests have been automatically triggered on feature branch to verify compatibility.\n\n**Preview package:** \`${{ needs.preview.outputs.preview-url }}\`\n\nResults will be posted here once testing is complete.`
                });
              }
            } catch (error) {
              console.error('Failed to trigger supabase-js tests:', error);
              if (context.issue.number) {
                await github.rest.issues.createComment({
                  owner: context.repo.owner,
                  repo: context.repo.repo,
                  issue_number: context.issue.number,
                  body: `‚ö†Ô∏è **Preview release created, but failed to trigger supabase-js tests**\n\n**Preview package:** \`${{ needs.preview.outputs.preview-url }}\`\n\nError: ${error.message}\n\nPlease manually verify compatibility or contact the team.`
                });
              }
              throw error;
            }